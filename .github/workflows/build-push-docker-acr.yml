# Action Requires
# 1. Setup the AZURE_CREDENTIALS secrets in your GitHub Repository
# 2. Setup the REGISTRY_USERNAME secrets in your GitHub Repository
# 3. Setup the REGISTRY_PASSWORD secrets in your GitHub Repository
# 4. Replace REGISTRY, NAMESPACE, IMAGE, TAG in the following template with proper values
# 5. Add this yaml file to your project's .github/workflows/
# 6. Push your local project to your GitHub Repository

name: Linux_Container_Workflow

on:
  push:
    branches:
    - enh/v1/code-restructure
env:                          # set this to proper value for TAG
  REGISTRY_USERNAME: 'demoacr4312'
  AZURE_FUNCTIONAPP_NAME: 'demochat12'   # set this to your function app name on Azure
  LOGIN_SERVER: 'demoacr4312.azurecr.io'              # set this to login server for your private container registry (e.g. 'contoso.azurecr.io', 'index.docker.io' )
  REGISTRY: 'demoacr4312.azurecr.io'                 # set this to proper value for REGISTRY
  IMAGE: 'demo-app'                       # set this to proper value for IMAGE
  TAG: 'latest'                           # set this to proper value for TAG


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Docker Login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.LOGIN_SERVER }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 'Compose Customized Docker Image'
        shell: bash
        run: |
          # If your function app project is not located in your repository's root
          # Please change the path to your directory for docker build
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }} -f deploy/azure_function/Dockerfile .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}
        
      - name: 'Run Azure Functions Container Action'
        uses: Azure/functions-container-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          image: ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}

    #- name: 'use the published functionapp url in upcoming steps'
    #  run: |
    #    echo "${{ steps.fa.outputs.app-url }}"


# For more information on GitHub Actions:
#   https://help.github.com/en/categories/automating-your-workflow-with-github-actions